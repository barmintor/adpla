module Ansr::Dpla
  module Arel
    class Connection < Ansr::Model::Connection
      def initialize(klass)
        super(klass)
        @method = klass.name.downcase.pluralize.to_sym
        @api = @table.engine.api
      end

      def to_sql(*args)
        to_nosql(*args)
      end

      # the object generated by this method will be passed to the self#execute
      def to_nosql(select_manager, bind_values)
        qb = Ansr::Dpla::Arel::QueryBuilder.new(@table)
        if ::Arel::Nodes::Intersect === select_manager
          filter_context = select_manager.right
          select_manager = select_manager.left
          constraints(filter_context).each {|c| qb.where(c)}
          projections(filter_context).each {|c| qb.add_facet(c)}
        end
        constraints(select_manager).each {|c| qb.where(c)}
        orders(select_manager).each {|c| qb.order(c)}
        projections(select_manager).each {|c| qb.select(c)}
        if (limit = limit(select_manager))
          qb.take(limit)
        end
        if (offset = offset(select_manager))
          qb.skip(offset)
        end
        qb.query_opts
      end


      def to_aliases(select_manager, bind_values)
        qb = Ansr::Dpla::Arel::QueryBuilder.new(@table)
        if ::Arel::Nodes::Intersect === select_manager
          select_manager = select_manager.left
        end
        projections(select_manager).each {|c| qb.select(c)}
        qb.aliases
      end

      def execute(query, aliases = {})
        json = @api.send(@method, query)
        json = json.length > 0 ? JSON.load(json) : {}
        if json['docs'] and aliases
          json['docs'].each do |doc|
            aliases.each do |k,v|
              if doc[k]
                old = doc.delete(k)
                if old and doc[v]
                  doc[v] = Array(doc[v]) if doc[v]
                  Array(old).each {|ov| doc[v] << ov}
                else
                  doc[v] = old
                end
              end
            end
          end
        end
        json
      end

      def table_exists?(table_name)
        ['Collection', 'Item'].include? table_name
      end

      def sanitize_limit(limit_value)
        if (0..500) === limit_value.to_s.to_i
          limit_value
        else
          Ansr::Relation::DEFAULT_PAGE_SIZE
        end
      end

    end
  end
 
end