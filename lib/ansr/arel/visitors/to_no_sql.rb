module Ansr::Arel::Visitors
  class ToNoSql < Arel::Visitors::Visitor
    attr_reader :table

    def initialize(big_table)
      super()
      @table = big_table
    end

    def query_builder(opts = nil)
      Ansr::Arel::Visitors::QueryBuilder.new(table, opts)
    end

    # the object generated by this method will be passed to the NoSqlAdapter#execute
    def visit_Arel_Nodes_SelectStatement(object, attribute)
      builder = query_builder

      if object.with
        builder.visit(object.with, attribute)
      end

      object.cores.each { |x| builder.visit_Arel_Nodes_SelectCore(x, attribute) }

      unless object.orders.empty?
        object.orders.each do |x|
          case x
          when ::Arel::Nodes::SqlLiteral
            builder.order(x.to_s)
          when ::Arel::Nodes::Ordering
            builder.order(x)
          else
            builder.merge visit(x, attribute)
          end
        end
      end

      builder.visit(object.limit, attribute) if object.limit
      builder.visit(object.offset, attribute) if object.offset
      # not relevant  
      #builder.visit(o.lock, attribute) if object.lock

      builder.query_opts
    end

    def visit_Arel_Nodes_Intersect(object, attribute)
      query_opts = visit_Arel_Nodes_SelectStatement(object.left, attribute)
      builder = query_builder(query_opts)

      filter_context = object.right
      filter_context.cores.each { |x| builder.visit_Arel_Nodes_SelectCore(x, Filter.new(attribute)) }

      builder.query_opts

    end

  end

end
